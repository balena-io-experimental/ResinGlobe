// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  var BuiltinScope, Scope, globals,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  globals = require("globals");

  Scope = require("./Scope");

  module.exports = BuiltinScope = (function(superClass) {
    extend(BuiltinScope, superClass);

    function BuiltinScope(envs, custom) {
      var env, i, len, name;
      if (envs == null) {
        envs = [];
      }
      if (custom == null) {
        custom = {};
      }
      this.getScopeOf = bind(this.getScopeOf, this);
      BuiltinScope.__super__.constructor.call(this, null, null);
      custom["this"] = false;
      if (typeof envs === "string") {
        envs = [envs];
      }
      envs = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = envs.length; i < len; i++) {
          env = envs[i];
          results.push(globals[env]);
        }
        return results;
      })();
      envs.push(custom);
      for (i = 0, len = envs.length; i < len; i++) {
        env = envs[i];
        for (name in env) {
          if (!hasProp.call(env, name)) continue;
          this.local(name).type = "Builtin";
        }
      }
      void 0;
    }

    BuiltinScope.prototype.getScopeOf = function(name) {
      if (this.symbols[name] != null) {
        return this;
      } else {
        return null;
      }
    };

    return BuiltinScope;

  })(Scope);

}).call(this);
