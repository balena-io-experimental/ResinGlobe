// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  var Coffeescope2, ScopeLinter;

  ScopeLinter = require("./ScopeLinter");

  module.exports = Coffeescope2 = (function() {
    function Coffeescope2() {}

    Coffeescope2.prototype.rule = {
      name: "check_scope",
      description: "<p>This rule checks the usage of your variables and prevents common\nmistakes or enforces style conventions</p>\n\n<p>It can check for and report:</p>\n\n<ul>\n    <li>Undefined variables</li>\n    <li>Unused variables and arguments (i.e. values that were\n        assigned to but never read)</li>\n    <li>Arguments that shadow variables from an outer scope (due to\n        the scoping rules in coffeescript, these can <em>only</em>\n        be arguments)</li>\n    <li>Arguments that overwrite variables from an outer scope (due\n        to the scoping rules in coffeescript, these can\n        <em>never</em> be arguments)</li>\n</ul>\n\nBesides the standard <code>level</code> option, this rule looks for\nthe following additional properties:\n\n<dl>\n    <dt><code>environments</code></dt>\n    <dd>A list of one or more environments from which to import\n        global variables. Available sets are:\n            <samp>builtin</samp>, <samp>es5</samp>,\n            <samp>es6</samp>,\n            <samp>browser</samp>,\n            <samp>worker</samp>,\n            <samp>node</samp>,\n            <samp>commonjs</samp>,\n            <samp>amd</samp>,\n            <samp>mocha</samp>,\n            <samp>jasmine</samp>,\n            <samp>jest</samp>,\n            <samp>qunit</samp>,\n            <samp>phantomjs</samp>,\n            <samp>couch</samp>,\n            <samp>rhino</samp>,\n            <samp>nashorn</samp>,\n            <samp>wsh</samp>,\n            <samp>jquery</samp>,\n            <samp>yui</samp>,\n            <samp>shelljs</samp>,\n            <samp>prototypejs</samp>,\n            <samp>meteor</samp>,\n            <samp>mongo</samp>,\n            <samp>applescript</samp>,\n            <samp>serviceworker</samp>,\n            <samp>atomtest</samp>,\n            <samp>embertest</samp>,\n            <samp>protractor</samp>,\n            <samp>shared-node-browser</samp>,\n            <samp>webextension</samp>,\n            <samp>greasemonkey</samp>.\n        This influences all the rules defined by this module as it\n        injects global variables within a file's scope.  The\n        default is <samp>[\"builtin\"]</samp> which includes all es3\n        globals</dd>\n\n    <dt><code>globals</code></dt>\n    <dd>An object where keys are variable names and values are\n        booleans. A value of true means that said variable is\n        visible in all global scopes and can be assigned to, while\n        a value of false means that the variable is read-only and a\n        warning will be issued whenever it's written to. This\n        influences all the rules defined by this module as it\n        injects global variables within a file's scope. Defaults to\n        an empty object: <samp>{}</samp>.</dd>\n\n    <dt><code>overwrite</code></dt>\n    <dd>A boolean representing whether to warn when assigning to a\n        variable that was defined in a parent scope. Because\n        coffeescript lacks a `let` statement, assigning to a\n        variable will only create a new variable if there are no\n        matching variables of the same name in the current scope.\n        This rule allows you to discourage code that relies on this\n        and prevents unintentional occurences. The default value is\n        <samp>true</samp> meaning assigning variables from an outer\n        scope will issue a warning / error.\n\n    <dt><code>same_scope</code></dt>\n    <dd>A boolean representing whether to warn a variable is\n        modified regardless of the scope it was defined in,\n        effectively preventing reference mutation. In this regard,\n        it forces all variables to behave similarly to the\n        <code>const</code> keyword in ES6+. Defaults to\n        <samp>false</samp>.</dd>\n\n    <dt><code>shadow</code></dt>\n    <dd>A boolean value that specifies whether shadowing existing\n        variables is accepted or not. This rule behaves similarly\n        to `overwrite`, but it only affects function arguments, as\n        that's the only mechanism provided by coffeescript that can\n        shadow variables without overwriting them. Defaults to\n        <samp>true</samp></dd>\n\n    <dt><code>shadow_builtins</code></dt>\n    <dd>A boolean value that specifies whether shadowing of builtin\n        global variables (as defined by <code>environments</code>\n        and <code>globals</code>) is accepted or not. Due to the\n        way coffeescript's scopes work, assigning to such a global\n        will not overwrite it; it will instead create a new\n        variable in the current scope that will shadow it. Defaults\n        to <samp>false</samp> because some browser builtins are\n        extremely generic: <samp>name</samp>, <samp>status</samp>\n    </dd>\n\n    <dt><code>shadow_exceptions</code></dt>\n    <dd>A list of regular expressions that further customizes the\n        behavior of <code>shadow</code> by allowing one or more\n        names to be extempt from shadowing warnings. The default\n        value is <samp>[\"err\", \"next\"]</samp> to allow nesting of\n        Node.JS-style continuations. To be skipped, the name must\n        match the entire expression:\n        <ul>\n            <li>\n                <samp>\"ba.\"</samp>\n                will match\n                    <code>\"bar\"</code> and\n                    <code>\"baz\"</code>\n                but not\n                    <code>\"bard\"</code> or\n                    <code>\"foobar\"</code>.\n            </li>\n            <li>\n                <samp>\"ba.*\"</samp>\n                will match\n                    <code>\"ba\"</code> and\n                    <code>\"bar\"</code> and\n                    <code>\"bard\"</code>.\n            </li>\n        </ul>\n    </dd>\n\n    <dt><code>undefined</code></dt>\n    <dd>A boolean value that specifies whether to raise a warning /\n        error in the event an undefined variable is accessed. The\n        default and <strong>highly recommended</strong> value is\n        <samp>true</samp>. To work around framework-specific\n        messages, use <code>environments</code> and / or\n        <code>globals</code> instead.</dd>\n\n    <dt><code>hoist_local</code></dt>\n    <dd>A boolean value that specifies whether to warn about\n    relying on variable hosting to the top of their scope. The\n    default value is <samp>true</samp> because of coffeescript's\n    semantics. Changing it to false will start producing warnings\n    whenever you attempt to access a local variable before you\n    first assigned to it. We recommend switching this to\n    <samp>false</samp> as it results in easier to read code.</dd>\n\n    <dt><code>hoist_parent</code></dt>\n    <dd>Similar to <code>hoist_local</code>, but it allows\n    referencing a variable before it was defined, provided it\n    belongs to (is written in) a parent scope. The default value is\n    <samp>true</samp>.</dd>\n\n    <dt><code>unused_variables</code></dt>\n    <dd>A boolean value that specifies whether to show a message if\n        a variable is assigned to but its value is never read.</dd>\n\n    <dt><code>unused_arguments</code></dt>\n    <dd>A boolean value that specifies whether to raise a warning /\n        error whenever a function argument is never read. Note that\n        arguments behave like variables for all intents and\n        purposes other than scoping and will respect any and all\n        <code>overwrite</code> and <code>shadow</code> rules and\n        exceptions.</dd>\n\n    <dt><code>unused_classes</code></dt>\n    <dd>A boolean value that specifies whether to raise a warning /\n        error whenever a class is defined but never used. Classes\n        that are part of an assignment statement never trigger\n        this warning. Defaults to <samp>true</samp> because of\n        historical reasons and the low rate of false positives\n        generated on most codebases.</dd>\n</dl>",
      level: "warn",
      message: "Scope error",
      environments: ["builtin"],
      globals: {},
      overwrite: true,
      same_scope: false,
      shadow: true,
      shadow_builtins: false,
      shadow_exceptions: ["err", "next"],
      undefined: true,
      hoist_local: true,
      hoist_parent: true,
      unused_variables: true,
      unused_arguments: false,
      unused_classes: true
    };

    Coffeescope2.prototype.lintAST = function(root, arg) {
      var config, createError, i, len, ref, spec;
      config = arg.config, createError = arg.createError;
      ref = ScopeLinter["default"]().lint(root, config[this.rule.name]);
      for (i = 0, len = ref.length; i < len; i++) {
        spec = ref[i];
        this.errors.push(createError(spec));
      }
      return void 0;
    };

    return Coffeescope2;

  })();

  module.exports.ScopeLinter = ScopeLinter;

}).call(this);
